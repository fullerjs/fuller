#!/usr/bin/env node

"use strict";

var fs = require('fs');
var path = require('path');
var args = require('args');
var Fuller = require('../lib');

var options = args.Options.parse([
    {
        name: 'plan',
        shortName: 'p',
        help: 'Plan file name',
        defaultValue: 'plan.js'
    },
    {
        name: 'watch',
        shortName: 'w',
        type: 'bool',
        help: 'Watch source directory for changes',
        defaultValue: false
    },
    {
        name: 'src',
        shortName: 's',
        help: 'Relative path to directory with source files',
    },
    {
        name: 'dst',
        shortName: 'd',
        help: 'Relative path to directory for compiled files',
    },
    {
        name: 'js',
        shortName: 'j',
        type: 'bool',
        help: 'Compile js only',
    },
    {
        name: 'css',
        shortName: 'c',
        type: 'bool',
        help: 'Compile css only',
    },
    {
        name: 'dev',
        shortName: 'z',
        type: 'bool',
        help: 'Developer version (no minifing and compressions)',
    },
    {
        name: 'verbose',
        shortName: 'v',
        type: 'bool',
        help: 'Verbose mode',
        defaultValue: false
    }
]);

try {
	var opt = args.parse(options);
} catch (err) {
	console.log(options.getHelp());
	process.exit(1);
}

var planFile = path.join(process.cwd(), opt.plan);
if (!fs.existsSync(planFile)) {
	console.log(options.getHelp());
	process.exit(1);
}
opt.plan = planFile;

if(opt.js || opt.css) {
    if(opt.js) { opt.css = false; }
    if(opt.css) { opt.js = false; }
} else {
    opt.js = true;
    opt.css = true;
}

var fuller = new Fuller(opt);

if(opt.watch) {
    fuller.watch();
} else {
    fuller.build();
}

