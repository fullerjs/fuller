{"name":"Fuller","tagline":"Build everything with right tool","body":"# Fuller #\r\n## Build everything with right tool##\r\n\r\n_Richard Buckminster \"Bucky\" Fuller was an American systems theorist, architect, engineer, author, designer, inventor, and futurist_\r\n\r\n## Install ##\r\n    npm install fuller -g\r\n\r\n## Usage ##\r\n    fuller [-w] [-src] [-dst] [-c] [-z] [-v]\r\n\r\n```\r\n--watch, -w     Watch source directory for changes\r\n--src           Relative path to directory with source files\r\n--dst           Relative path to directory for compiled files\r\n--dev, -z       Developer version (usually this means no minifing and compressions, but depends from plugin)\r\n--verbose, -v   Verbose mode\r\n--task-name     Run task specified by plan\r\n```\r\n\r\n## Tools ##\r\nThis is about right tools. But what is a Tool? Tool is a plugin, that building something according to plan. Plan is a simple js object:\r\n\r\n```js\r\nplan = {\r\n    someOtherUsefulStuff: Stuff,\r\n    \r\n    tools: {\r\n        toolName: toolPlan\r\n    },\r\n}\r\n```\r\nor if your tool don't need a plan it can be simple array\r\n```js\r\nplan = {    \r\n    tools: ['tool1', 'tool2']\r\n}\r\n```\r\nWhat's interesting tools can use another tools...\r\n```js\r\nplan: {\r\n    tools: {\r\n        tool1: {\r\n            tools: {\r\n                tool2: etc;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n__;)__\r\n\r\nYou should include tools' packages in your project's package.json\r\n\r\n### Tools API ###\r\nNeeds to be written. \r\nBut you can check fuller's js build tool.\r\n\r\n## Plan ##\r\nSo Mr. Fuller needs a plan, it is a simple node module:\r\n```js\r\nvar defaults = {\r\n    src: \"./src\",\r\n    dst: \"./static\",\r\n    dev: true\r\n};\r\n\r\nvar js = {\r\n    \"out/script.js\": [\r\n        \"src1.js\",\r\n        \"src2.js\"\r\n    ]\r\n};\r\n\r\nvar less = {\r\n        \"out.css\": \"src.less\"\r\n};\r\n\r\nvar tasks = {\r\n    //look for further explanation in the text below\r\n}\r\n\r\nmodule.exports = {\r\n    defaults: defaults,\r\n    tasks: tasks,\r\n\r\n    tools : {\r\n        js: {files: js, tools: ['common-js', 'uglify']},\r\n        less: {files: less},\r\n    }\r\n};\r\n```\r\n\r\n### Defaults ###\r\nYou can specify default option in global section, and overide them with command line.\r\n\r\n#### File tools ####\r\nAlso fuller has special purpose file tools. You can load in your plugin with a fuller.getTool('files').\r\n\r\n* __concat(path, arrayFileNames, [prependString], [appendString])__ — concatenates files with base path and strings for appeding and prepending to result.\r\n* __treeToArray(srcPath, files)__ — converts path and array of files to array of full paths to files\r\n* __writeForce(pathFile, data, cb)__ — writes file, but if destination directory not exist creates it.\r\n* __addDependence(deps, master, slave)__ — adds depenencies to deps object\r\n* __mkdirp__ — make path\r\n* __watchFiles(root, arrayFileNames, cb)__ — adds watchers and run cb on files changes.\r\n\r\n## Tasks\r\nYou can specify your own tasks in plan:\r\n```js\r\ntasks = {\r\n    start: function(fuller) {\r\n        fuller.build();             //builds everything\r\n        fuller.run('bin/cmd start') //run cmd\r\n    }\r\n}\r\n```\r\nand then just run it\r\n    fuller --start\r\n\r\nDon't forget about verbose mode here if you needed.\r\n\r\nThe fuller var in your task function is a pointer to global fuller object.\r\n\r\n__fuller.plan__ — your plan\r\n\r\n__fuller.build()__ — builds everything.\r\n\r\n__fuller.watch()__ — watch for changes in all  tools.\r\n\r\n__fuller.run(cmd)__ — run cmd\r\n\r\nVerbose mode:\r\n\r\n__fuller.verbose.log(str)__ — print str to console if fuller in verbose mode\r\n\r\nBonus, you can specify dev task. It'll be run before all others tasks when you'll use -z(--dev) key.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}